<?php
/**
 * Employment
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  MergeHRISClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MergeHRISClient\Model;

use \ArrayAccess;
use \MergeHRISClient\ObjectSerializer;

/**
 * Employment Class Doc Comment
 *
 * @category Class
 * @description # The Employment Object ### Description The &#x60;Employment&#x60; object is used to represent an employment position at a company. These are associated with the employee filling the role.  ### Usage Example Fetch from the &#x60;LIST Employments&#x60; endpoint and filter by &#x60;ID&#x60; to show all employees.
 * @package  MergeHRISClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Employment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Employment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'remote_id' => 'string',
        'employee' => 'string',
        'job_title' => 'string',
        'pay_rate' => 'float',
        'pay_period' => 'PayPeriodEnum',
        'pay_frequency' => 'PayFrequencyEnum',
        'pay_currency' => 'PayCurrencyEnum',
        'flsa_status' => 'FlsaStatusEnum',
        'effective_date' => '\DateTime',
        'employment_type' => 'EmploymentTypeEnum',
        'remote_data' => '\MergeHRISClient\Model\RemoteData[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'remote_id' => null,
        'employee' => 'uuid',
        'job_title' => null,
        'pay_rate' => 'float',
        'pay_period' => null,
        'pay_frequency' => null,
        'pay_currency' => null,
        'flsa_status' => null,
        'effective_date' => 'date-time',
        'employment_type' => null,
        'remote_data' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'remote_id' => 'remote_id',
        'employee' => 'employee',
        'job_title' => 'job_title',
        'pay_rate' => 'pay_rate',
        'pay_period' => 'pay_period',
        'pay_frequency' => 'pay_frequency',
        'pay_currency' => 'pay_currency',
        'flsa_status' => 'flsa_status',
        'effective_date' => 'effective_date',
        'employment_type' => 'employment_type',
        'remote_data' => 'remote_data'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'remote_id' => 'setRemoteId',
        'employee' => 'setEmployee',
        'job_title' => 'setJobTitle',
        'pay_rate' => 'setPayRate',
        'pay_period' => 'setPayPeriod',
        'pay_frequency' => 'setPayFrequency',
        'pay_currency' => 'setPayCurrency',
        'flsa_status' => 'setFlsaStatus',
        'effective_date' => 'setEffectiveDate',
        'employment_type' => 'setEmploymentType',
        'remote_data' => 'setRemoteData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'remote_id' => 'getRemoteId',
        'employee' => 'getEmployee',
        'job_title' => 'getJobTitle',
        'pay_rate' => 'getPayRate',
        'pay_period' => 'getPayPeriod',
        'pay_frequency' => 'getPayFrequency',
        'pay_currency' => 'getPayCurrency',
        'flsa_status' => 'getFlsaStatus',
        'effective_date' => 'getEffectiveDate',
        'employment_type' => 'getEmploymentType',
        'remote_data' => 'getRemoteData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['remote_id'] = $data['remote_id'] ?? null;
        $this->container['employee'] = $data['employee'] ?? null;
        $this->container['job_title'] = $data['job_title'] ?? null;
        $this->container['pay_rate'] = $data['pay_rate'] ?? null;
        $this->container['pay_period'] = $data['pay_period'] ?? null;
        $this->container['pay_frequency'] = $data['pay_frequency'] ?? null;
        $this->container['pay_currency'] = $data['pay_currency'] ?? null;
        $this->container['flsa_status'] = $data['flsa_status'] ?? null;
        $this->container['effective_date'] = $data['effective_date'] ?? null;
        $this->container['employment_type'] = $data['employment_type'] ?? null;
        $this->container['remote_data'] = $data['remote_data'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets remote_id
     *
     * @return string|null
     */
    public function getRemoteId()
    {
        return $this->container['remote_id'];
    }

    /**
     * Sets remote_id
     *
     * @param string|null $remote_id The third-party API ID of the matching object.
     *
     * @return self
     */
    public function setRemoteId($remote_id)
    {
        $this->container['remote_id'] = $remote_id;

        return $this;
    }

    /**
     * Gets employee
     *
     * @return string|null
     */
    public function getEmployee()
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param string|null $employee The employee holding this position.
     *
     * @return self
     */
    public function setEmployee($employee)
    {
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets job_title
     *
     * @return string|null
     */
    public function getJobTitle()
    {
        return $this->container['job_title'];
    }

    /**
     * Sets job_title
     *
     * @param string|null $job_title The position's title.
     *
     * @return self
     */
    public function setJobTitle($job_title)
    {
        $this->container['job_title'] = $job_title;

        return $this;
    }

    /**
     * Gets pay_rate
     *
     * @return float|null
     */
    public function getPayRate()
    {
        return $this->container['pay_rate'];
    }

    /**
     * Sets pay_rate
     *
     * @param float|null $pay_rate The position's pay rate in dollars.
     *
     * @return self
     */
    public function setPayRate($pay_rate)
    {
        $this->container['pay_rate'] = $pay_rate;

        return $this;
    }

    /**
     * Gets pay_period
     *
     * @return PayPeriodEnum|null
     */
    public function getPayPeriod()
    {
        return $this->container['pay_period'];
    }

    /**
     * Sets pay_period
     *
     * @param PayPeriodEnum|null $pay_period The time period this pay rate encompasses.
     *
     * @return self
     */
    public function setPayPeriod($pay_period)
    {
        $this->container['pay_period'] = $pay_period;

        return $this;
    }

    /**
     * Gets pay_frequency
     *
     * @return PayFrequencyEnum|null
     */
    public function getPayFrequency()
    {
        return $this->container['pay_frequency'];
    }

    /**
     * Sets pay_frequency
     *
     * @param PayFrequencyEnum|null $pay_frequency The position's pay frequency.
     *
     * @return self
     */
    public function setPayFrequency($pay_frequency)
    {
        $this->container['pay_frequency'] = $pay_frequency;

        return $this;
    }

    /**
     * Gets pay_currency
     *
     * @return PayCurrencyEnum|null
     */
    public function getPayCurrency()
    {
        return $this->container['pay_currency'];
    }

    /**
     * Sets pay_currency
     *
     * @param PayCurrencyEnum|null $pay_currency The position's currency code.
     *
     * @return self
     */
    public function setPayCurrency($pay_currency)
    {
        $this->container['pay_currency'] = $pay_currency;

        return $this;
    }

    /**
     * Gets flsa_status
     *
     * @return FlsaStatusEnum|null
     */
    public function getFlsaStatus()
    {
        return $this->container['flsa_status'];
    }

    /**
     * Sets flsa_status
     *
     * @param FlsaStatusEnum|null $flsa_status The position's FLSA status.
     *
     * @return self
     */
    public function setFlsaStatus($flsa_status)
    {
        $this->container['flsa_status'] = $flsa_status;

        return $this;
    }

    /**
     * Gets effective_date
     *
     * @return \DateTime|null
     */
    public function getEffectiveDate()
    {
        return $this->container['effective_date'];
    }

    /**
     * Sets effective_date
     *
     * @param \DateTime|null $effective_date The position's effective date.
     *
     * @return self
     */
    public function setEffectiveDate($effective_date)
    {
        $this->container['effective_date'] = $effective_date;

        return $this;
    }

    /**
     * Gets employment_type
     *
     * @return EmploymentTypeEnum|null
     */
    public function getEmploymentType()
    {
        return $this->container['employment_type'];
    }

    /**
     * Sets employment_type
     *
     * @param EmploymentTypeEnum|null $employment_type The position's type of employment.
     *
     * @return self
     */
    public function setEmploymentType($employment_type)
    {
        $this->container['employment_type'] = $employment_type;

        return $this;
    }

    /**
     * Gets remote_data
     *
     * @return \MergeHRISClient\Model\RemoteData[]|null
     */
    public function getRemoteData()
    {
        return $this->container['remote_data'];
    }

    /**
     * Sets remote_data
     *
     * @param \MergeHRISClient\Model\RemoteData[]|null $remote_data remote_data
     *
     * @return self
     */
    public function setRemoteData($remote_data)
    {
        $this->container['remote_data'] = $remote_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


